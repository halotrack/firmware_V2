# SISTEMA HALO 

## DESCRIPCI√ìN GENERAL
El sistema HALO es una balanza inteligente basada en ESP32 que integra medici√≥n de peso, almacenamiento local, conectividad WiFi/MQTT y gesti√≥n de energ√≠a. El sistema est√° dise√±ado para funcionar de manera aut√≥noma, realizando mediciones peri√≥dicas y sincronizando datos con un servidor central.

## ARQUITECTURA DEL SISTEMA

### HARDWARE PRINCIPAL
- **Microcontrolador**: ESP32 (Dual Core, 240MHz)
- **Sensor de Peso**: HX711 (24-bit ADC para celdas de carga)
- **Reloj de Tiempo Real**: DS3231 
- **Almacenamiento**: Tarjeta SD (SPI)
- **Medici√≥n de Bater√≠a**: BQ27427 (Fuel Gauge)
- **Comunicaci√≥n**: WiFi 802.11 b/g/n
- **Interfaz de Usuario**: Bot√≥n f√≠sico con LED indicador

### CONFIGURACI√ìN DE PINES
```
HX711_DOUT    = GPIO 17    (Datos del sensor)
HX711_SCK     = GPIO 16    (Clock del sensor)

I2C_SDA       = GPIO 21    (I2C Data - RTC y Bater√≠a)
I2C_SCL       = GPIO 22    (I2C Clock - RTC y Bater√≠a)

USER_BUTTON   = GPIO 25    (Bot√≥n de usuario)
LED_STATUS    = GPIO 0     (LED de estado)
PIN_POWER     = GPIO 26    (pin de alimentaci√≥n)

SD_MOSI       = GPIO 23    (SPI MOSI)
SD_MISO       = GPIO 19    (SPI MISO)
SD_CLK        = GPIO 18    (SPI Clock)
SD_CS         = GPIO 5     (SPI Chip Select)
```

## ARQUITECTURA DE SOFTWARE

### DISTRIBUCI√ìN DE TAREAS FREERTOS

#### N√öCLEO 0 (Protocolo):
- **task_HX711**: Lectura del sensor de peso
  - Stack: 3072 bytes
  - Prioridad: 6 (ALTA)
  - Funci√≥n: Medici√≥n continua, calibraci√≥n, logging a SD

#### N√öCLEO 1 (Aplicaci√≥n):
- **task_MQTT**: Comunicaciones de red y env√≠o de datos
  - Stack: 6144 bytes (SSL requiere m√°s memoria)
  - Prioridad: 4 (MEDIA)
  - Funci√≥n: Conexi√≥n WiFi, env√≠o MQTT, gesti√≥n de credenciales

- **user_button_task**: Interfaz de usuario
  - Stack: 2048 bytes (l√≥gica m√≠nima)
  - Prioridad: 8 (MUY ALTA)
  - Funci√≥n: Detecci√≥n de pulsaciones, SmartConfig, comandos

### ESTADOS DEL SISTEMA

#### Estados de la Tarea HX711:
1. **HX711_ESPERA_INICIALIZACION**: Espera inicializaci√≥n del sistema
2. **HX711_ESPERA_FECHA_HORA**: Espera sincronizaci√≥n de tiempo del servidor
3. **HX711_ESPERA_COMANDO**: Espera comandos de calibraci√≥n
4. **HX711_CALIBRACION**: Ejecuta proceso de calibraci√≥n
5. **HX711_ESPERA_PESO**: Espera peso conocido para calibraci√≥n
6. **HX711_ESPERA_CONFIG_HORARIO**: Espera configuraci√≥n de horario de env√≠o
7. **HX711_MEDICION**: Estado principal de medici√≥n continua

#### Estados de la Tarea MQTT:
1. **MQTT_ESPERA_INICIALIZACION**: Espera inicializaci√≥n del sistema
2. **MQTT_ESPERA_HORARIO_ENVIO**: Espera horario programado de env√≠o
3. **MQTT_CONECTANDO_WIFI**: Establece conexi√≥n WiFi
4. **MQTT_CONECTANDO_BROKER**: Conecta al broker MQTT
5. **MQTT_ENVIANDO_DATOS**: Env√≠a datos almacenados en SD
6. **MQTT_FINALIZANDO_ENVIO**: Finaliza env√≠o y desconecta
7. **MQTT_ESPERANDO_SIGUIENTE_CICLO**: Espera pr√≥ximo ciclo de env√≠o

## FUNCIONALIDADES PRINCIPALES

### 1. MEDICI√ìN DE PESO
- **Sensor**: HX711 con resoluci√≥n de 24 bits
- **Calibraci√≥n**: Sistema de calibraci√≥n con peso conocido
- **Filtrado**: Validaci√≥n de lecturas con umbral de error
- **Almacenamiento**: Guardado autom√°tico en tarjeta SD (CSV)

### 2. GESTI√ìN DE TIEMPO
- **RTC**: DS3231 para mantener timer sin alimentaci√≥n
- **Sincronizaci√≥n**: Actualizaci√≥n de tiempo v√≠a MQTT
- **Zona Horaria**: Configuraci√≥n autom√°tica de zona horaria
- **Timestamp**: Marcado temporal preciso de cada medici√≥n

### 3. CONECTIVIDAD DE RED
- **WiFi**: Conexi√≥n autom√°tica con credenciales guardadas
- **SmartConfig**: Configuraci√≥n inal√°mbrica mediante app m√≥vil
- **MQTT**: Comunicaci√≥n segura con broker (TLS/SSL)
- **Reconexi√≥n**: Sistema autom√°tico de reconexi√≥n en caso de fallo

### 4. ALMACENAMIENTO LOCAL
- **SD Card**: Almacenamiento persistente de mediciones
- **Formato CSV**: Estructura: Fecha,Hora,Peso
- **Rotaci√≥n**: Gesti√≥n autom√°tica de espacio en disco
- **Sincronizaci√≥n**: Env√≠o diferido de datos pendientes

### 5. GESTI√ìN DE ENERG√çA
- **Fuel Gauge**: Monitoreo de bater√≠a con BQ27427
- **Modo Ahorro**: Desconexi√≥n autom√°tica tras env√≠o de datos
- **Reactivaci√≥n**: Reconexi√≥n en horarios programados
- **LEDs**: Indicadores visuales de estado del sistema

### 6. INTERFAZ DE USUARIO
- **Bot√≥n F√≠sico**: Control manual del sistema
- **Pulsaci√≥n Corta**: Coneccion al servidor
- **Pulsaci√≥n Larga**: Activaci√≥n de SmartConfig
- **LEDs**: Retroalimentaci√≥n visual del estado

## PROTOCOLOS DE COMUNICACI√ìN

### MQTT Topics
```
esp32/command              - Comandos generales del sistema
esp32/set_schedule         - Configuraci√≥n de horario de env√≠o
esp32/set_time             - Sincronizaci√≥n de fecha/hora
esp32/halo/status          - Estado del sistema
esp32/halo/conection       - Estado de conexi√≥n
esp32/halo/weight_data     - Datos de peso
esp32/halo/device_info     - Informaci√≥n del dispositivo
```

### Comandos MQTT Soportados
- **CALIBRAR**: Inicia proceso de calibraci√≥n del sensor
- **PESO_XXXX**: Especifica peso conocido para calibraci√≥n
- **HORARIO_HH:MM**: Configura horario de env√≠o diario
- **FECHA_YYYY-MM-DD_HH:MM:SS**: Sincroniza fecha y hora
- **REINICIAR**: Reinicia el sistema completo

## CONFIGURACI√ìN Y CALIBRACI√ìN

### Proceso de Calibraci√≥n
1. **Comando CALIBRAR** v√≠a MQTT
2. **Medici√≥n de offset** (tara) autom√°tica
3. **Espera de peso conocido** (comando PESO_XXXX)
4. **C√°lculo de factor de escala**
5. **Guardado en NVS** para persistencia
6. **Validaci√≥n** de calibraci√≥n

### Configuraci√≥n de Red
1. **SmartConfig**: App m√≥vil env√≠a credenciales WiFi
2. **Almacenamiento**: Guardado seguro en NVS
3. **M√∫ltiples redes**: Soporte para hasta 3 redes WiFi
4. **Reconexi√≥n autom√°tica**: Intento de conexi√≥n a redes guardadas

## GESTI√ìN DE DATOS

### Almacenamiento Local (SD)
```csv
Fecha,Hora,Peso
2024-01-15,14:30:25,1250.5
2024-01-15,14:30:35,1251.2
2024-01-15,14:30:45,1250.8
```

### Sincronizaci√≥n con Servidor
- **Env√≠o programado**: Diario a hora configurada
- **Env√≠o diferido**: Datos pendientes en pr√≥ximo ciclo
- **Validaci√≥n temporal**: Solo env√≠o de datos del d√≠a actual
- **Confirmaci√≥n**: Actualizaci√≥n de √≠ndice de √∫ltima muestra enviada

## CONFIGURACI√ìN DE SISTEMA

### Par√°metros NVS (Non-Volatile Storage)
```
halo/ultima_muestra        - √çndice de √∫ltima muestra enviada
halo/hora_envio           - Hora programada de env√≠o (0-23)
halo/minuto_envio         - Minuto programado de env√≠o (0-59)
halo/muestreo_ms          - Intervalo entre mediciones (ms)
halo/wifi_ssid_0/1/2      - Credenciales WiFi (3 slots)
halo/wifi_pass_0/1/2      - Contrase√±as WiFi (3 slots)
hx711_cal/offset          - Offset de calibraci√≥n del sensor
hx711_cal/scale           - Factor de escala del sensor
hx711_cal/calibrated      - Flag de calibraci√≥n v√°lida
```

### Configuraci√≥n por Defecto
- **Muestreo**: 10 segundos entre mediciones
- **Env√≠o**: 00:00 (medianoche) diario
- **Timeout WiFi**: 30 segundos
- **Timeout MQTT**: 30 segundos
- **SmartConfig**: 120 segundos m√°ximo

## DIAGN√ìSTICO Y MONITOREO

### Funci√≥n de Diagn√≥stico
```c
void diagnostico_sistema(void) {
    ESP_LOGI(TAG, "=== DIAGN√ìSTICO DEL SISTEMA ===");
    ESP_LOGI(TAG, "SD: %s", sdcard_info.is_mounted ? "MONTADA" : "SIN SD");

    struct tm timeinfo;
    if (rtc_get_time(&timeinfo)) {
        ESP_LOGI(TAG, "RTC: FUNCIONANDO - %02d:%02d:%02d", 
                 timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);
    } else {
        ESP_LOGE(TAG, "RTC: ERROR");
    }
    
    // Verificar estado de credenciales WiFi
    if (smartconfig_has_saved_credentials()) {
        char ssid[20];
        char password[30];
        if (smartconfig_load_credentials(ssid, password, sizeof(ssid)) == ESP_OK) {
            ESP_LOGI(TAG, "WiFi: üì± SMARTCONFIG ACTIVO - SSID: %s", ssid);
            ESP_LOGI(TAG, "WiFi: ‚úÖ El sistema usar√° credenciales de SmartConfig");
        } else {
            ESP_LOGE(TAG, "WiFi: ‚ùå ERROR AL CARGAR CREDENCIALES DE SMARTCONFIG");
        }
    } else {
        ESP_LOGW(TAG, "WiFi: ‚ö†Ô∏è SIN CREDENCIALES DE SMARTCONFIG");
    }
}
```

### Logs del Sistema
- **Nivel ERROR**: Errores cr√≠ticos del sistema
- **Nivel WARN**: Advertencias y fallos recuperables
- **Nivel INFO**: Informaci√≥n general de funcionamiento
- **Nivel DEBUG**: Informaci√≥n detallada de debug
- **Nivel VERBOSE**: Informaci√≥n muy detallada

## SEGURIDAD Y ROBUSTEZ

### Protecci√≥n de Datos
- **Mutex**: Protecci√≥n de acceso concurrente a SD y configuraci√≥n
- **Timeouts**: Prevenci√≥n de bloqueos indefinidos
- **Validaci√≥n**: Verificaci√≥n de integridad de datos
- **Recuperaci√≥n**: Sistema de recuperaci√≥n ante fallos

### Gesti√≥n de Errores
- **Reintentos**: Sistema autom√°tico de reintentos para conexiones
- **Fallback**: Funcionamiento offline cuando no hay conectividad
- **Logging**: Registro detallado de errores para diagn√≥stico
- **Recuperaci√≥n**: Reinicio autom√°tico en casos cr√≠ticos


## MANTENIMIENTO Y ACTUALIZACIONES

### Actualizaci√≥n de Firmware
- **OTA**: Actualizaci√≥n inal√°mbrica v√≠a MQTT
- **Serial**: Actualizaci√≥n v√≠a puerto serie
- **Bootloader**: Sistema de arranque seguro

### Resoluci√≥n de Problemas
1. **Verificar logs** del sistema
2. **Comprobar conectividad** WiFi/MQTT
3. **Validar calibraci√≥n** del sensor
4. **Revisar configuraci√≥n** NVS
5. **Resetear sistema** si es necesario

## ESPECIFICACIONES T√âCNICAS

### Rendimiento
- **Frecuencia de muestreo**: Configurable (default: 10s)
- **Resoluci√≥n de peso**: 24 bits (HX711)
- **Precisi√≥n temporal**: ¬±2ppm (DS3231)
- **Capacidad de almacenamiento**: Limitada por SD
- **Tiempo de respuesta**: <100ms para comandos

### Consumo de Energ√≠a
- **Modo activo**: ~200mA (medici√≥n + WiFi)
- **Modo ahorro**: ~50mA (solo medici√≥n)
- **Modo sleep**: ~10mA (RTC + sistema m√≠nimo)
- **Autonom√≠a**: Dependiente de capacidad de bater√≠a

### Conectividad
- **WiFi**: 802.11 b/g/n (2.4GHz)
- **MQTT**: TLS/SSL sobre TCP
- **I2C**: 400kHz (RTC y bater√≠a)
- **SPI**: 1MHz (SD card)
